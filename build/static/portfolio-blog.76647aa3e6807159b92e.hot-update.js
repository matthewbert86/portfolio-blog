webpackHotUpdate("portfolio-blog",{

/***/ "./packages/mars-theme/src/components/profile.js":
/*!*******************************************************!*\
  !*** ./packages/mars-theme/src/components/profile.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _featured_media__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./featured-media */ \"./packages/mars-theme/src/components/featured-media.js\");\n/* harmony import */ var _images_matt_jpg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../images/matt.jpg */ \"./packages/mars-theme/src/images/matt.jpg\");\n/* harmony import */ var _images_matt_jpg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_images_matt_jpg__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_icons_fa__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-icons/fa */ \"./node_modules/react-icons/fa/index.esm.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var Profile=(_ref)=>{var{state,actions,libraries}=_ref;// Get information about the current URL.\nvar data=state.source.get(state.router.link);// Get the data of the post.\nvar post=state.source[data.type][data.id];// Get the data of the author.\nvar author=state.source.author[post.author];// Get a human readable date.\nvar date=new Date(post.date);// Get the html2react component.\nvar Html2React=libraries.html2react.Component;/**\n   * Once the post has loaded in the DOM, prefetch both the\n   * home posts and the list component so if the user visits\n   * the home page, everything is ready and it loads instantly.\n   */Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");_list__WEBPACK_IMPORTED_MODULE_4__[\"default\"].preload();},[]);// Load the post, but only if the data is ready.\nreturn data.isReady?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Headline,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(HeadlineContent,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Action,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",null,\"Hi, I'm Matt\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",null,\"A Web developer from the Tampa Bay area. I create wonderful websites and apps to help bring client ideas to life.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"button\",null,\"Contact Me\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Icons,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"a\",{href:\"https://www.linkedin.com/in/mbert1986/\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_icons_fa__WEBPACK_IMPORTED_MODULE_7__[\"FaLinkedin\"],{color:\"#102a42\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"a\",{href:\"https://twitter.com/thementalgeek\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_icons_fa__WEBPACK_IMPORTED_MODULE_7__[\"FaTwitterSquare\"],{color:\"#102a42\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"a\",{href:\"https://www.instagram.com/mental_geek/\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_icons_fa__WEBPACK_IMPORTED_MODULE_7__[\"FaInstagramSquare\"],{color:\"#102a42\"})))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:_images_matt_jpg__WEBPACK_IMPORTED_MODULE_6___default.a,alt:\"Logo\"}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Title,{dangerouslySetInnerHTML:{__html:post.title.rendered}}),data.isPost&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,author&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledLink,{link:author.link},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Author,null,\"By \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"b\",null,author.name))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(DateWrapper,null,\" \",\"on \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"b\",null,date.toDateString())))),state.theme.featured.showOnPost&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_featured_media__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{id:post.featured_media}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Content,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Html2React,{html:post.content.rendered}))):null;};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Profile));var Headline=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ey75af50\",label:\"Headline\"})( false?undefined:{name:\"1ajbm5z\",styles:\"background-color:#8ccbfc;height:560px;width:100%;-webkit-clip-path:polygon(0 0,100% 0,100% 56%,0 100%);clip-path:polygon(0 0,100% 0,100% 100%,0 80%);@media screen and (max-width:900px){height:700px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var HeadlineContent=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ey75af51\",label:\"HeadlineContent\"})( false?undefined:{name:\"8cac3u\",styles:\"box-sizing:border-box;padding:40px 0;margin:0 10%;display:inline-block;flex-direction:column;justify-content:space-around;@media screen and (max-width:800px){&{width:auto;}}img{width:32%;margin-left:5.8rem;border-radius:50%;@media screen and (max-width:800px){&{width:75%;margin:30px 0 0 50px;}}}button{float:left;background-color:#49aeba;color:#fff;padding:.575rem .95rem;letter-spacing:var(--spacing);display:inline-block;font-weight:500;transition:var(--transition);font-size:1.575rem;border:2px solid transparent;cursor:pointer;box-shadow:0 1px 3px rgba(0,0,0,.2);border-radius:10px;}button:hover{background-color:#86e1ec;}p{float:left;font-size:1.3rem;color:#102a42;}h2{color:#102a42;font-size:3.7rem;float:left;padding-bottom:0;margin-bottom:0;@media screen and (max-width:800px){&{font-size:1.5rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Icons=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"nav\",{target:\"ey75af52\",label:\"Icons\"})( false?undefined:{name:\"1nrcmw7\",styles:\"font-size:35px;padding:10px 0 0 0;display:flex;float:left;svg{padding-right:28px;}@media screen and (max-width:1087px){display:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Action=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ey75af53\",label:\"Action\"})( false?undefined:{name:\"75edjk\",styles:\"width:55%;margin:0 30px 0 0;div{padding-bottom:50px;}@media screen and (max-width:800px){&{width:100%;margin:0 auto;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ey75af54\",label:\"Container\"})( false?undefined:{name:\"16839bs\",styles:\"width:100%;padding:0;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"h1\",{target:\"ey75af55\",label:\"Title\"})( false?undefined:{name:\"1tp9sya\",styles:\"margin:0;margin-top:24px;margin-bottom:8px;color:rgba(12,17,43);display:none;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"ey75af56\",label:\"StyledLink\"})( false?undefined:{name:\"qar1bk\",styles:\"padding:15px 0;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Author=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"ey75af57\",label:\"Author\"})( false?undefined:{name:\"d1uwmw\",styles:\"color:rgba(12,17,43,0.9);font-size:0.9em;display:inline;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DateWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"ey75af58\",label:\"DateWrapper\"})( false?undefined:{name:\"d1uwmw\",styles:\"color:rgba(12,17,43,0.9);font-size:0.9em;display:inline;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/**\n * This component is the parent of the `content.rendered` HTML. We can use nested\n * selectors to style that HTML.\n */var Content=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ey75af59\",label:\"Content\"})( false?undefined:{name:\"m4f13y\",styles:\"color:rgba(12,17,43,0.8);word-break:break-word;margin:2% 5%;*{max-width:100%;}p{line-height:1.6em;}img{width:100%;object-fit:cover;object-position:center;}blockquote{margin:16px 0;background-color:rgba(0,0,0,0.1);border-left:4px solid rgba(12,17,43);padding:4px 16px;}a{color:rgb(31,56,197);text-decoration:underline;}.wp-block-column{display:inline-block;width:50%;@media screen and (max-width:800px){&{width:75%;margin:5%;}}p{padding:0;}.wp-block-image{width:500px;@media screen and (max-width:800px){&{width:100%;}}}.column-2{width:30%;}input[type=\\\"text\\\"],input[type=\\\"email\\\"],input[type=\\\"url\\\"],input[type=\\\"tel\\\"],input[type=\\\"number\\\"],input[type=\\\"date\\\"],textarea,select{display:block;padding:6px 12px;font-size:16px;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:4px;outline-color:transparent;transition:outline-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;margin:8px 0 4px 0;&:focus{outline-color:#1f38c5;}}input[type=\\\"submit\\\"]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid #1f38c5;padding:12px 36px;font-size:14px;line-height:1.42857143;border-radius:4px;color:#fff;background-color:#1f38c5;}@media (min-width:420px){img.aligncenter,img.alignleft,img.alignright{width:auto;}.aligncenter{display:block;margin-left:auto;margin-right:auto;}.alignright{float:right;margin-left:24px;}.alignleft{float:left;margin-right:24px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/profile.js\n");

/***/ })

})